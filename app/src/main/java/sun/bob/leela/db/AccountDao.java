package sun.bob.leela.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sun.bob.leela.db.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCOUNT.
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Account_name = new Property(2, String.class, "account_name", false, "ACCOUNT_NAME");
        public final static Property Salt = new Property(3, String.class, "salt", false, "SALT");
        public final static Property Hash = new Property(4, String.class, "hash", false, "HASH");
        public final static Property Category = new Property(5, long.class, "category", false, "CATEGORY");
        public final static Property Tag = new Property(6, String.class, "tag", false, "TAG");
        public final static Property Last_access = new Property(7, Long.class, "last_access", false, "LAST_ACCESS");
        public final static Property Icon = new Property(8, String.class, "icon", false, "ICON");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'ACCOUNT_NAME' TEXT," + // 2: account_name
                "'SALT' TEXT NOT NULL ," + // 3: salt
                "'HASH' TEXT NOT NULL ," + // 4: hash
                "'CATEGORY' INTEGER NOT NULL ," + // 5: category
                "'TAG' TEXT NOT NULL ," + // 6: tag
                "'LAST_ACCESS' INTEGER," + // 7: last_access
                "'ICON' TEXT);"); // 8: icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String account_name = entity.getAccount_name();
        if (account_name != null) {
            stmt.bindString(3, account_name);
        }
        stmt.bindString(4, entity.getSalt());
        stmt.bindString(5, entity.getHash());
        stmt.bindLong(6, entity.getCategory());
        stmt.bindString(7, entity.getTag());
 
        Long last_access = entity.getLast_access();
        if (last_access != null) {
            stmt.bindLong(8, last_access);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(9, icon);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account_name
            cursor.getString(offset + 3), // salt
            cursor.getString(offset + 4), // hash
            cursor.getLong(offset + 5), // category
            cursor.getString(offset + 6), // tag
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // last_access
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // icon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAccount_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSalt(cursor.getString(offset + 3));
        entity.setHash(cursor.getString(offset + 4));
        entity.setCategory(cursor.getLong(offset + 5));
        entity.setTag(cursor.getString(offset + 6));
        entity.setLast_access(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIcon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
